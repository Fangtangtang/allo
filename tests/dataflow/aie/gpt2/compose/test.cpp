
//=============================================================================
// Auto generated by Allo
//=============================================================================
#include <bits/stdc++.h>
#include <boost/program_options.hpp>
#include <cstdint>
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <sstream>
#include <stdfloat>
#include <string>
#include <vector>

#include "xrt/xrt_bo.h"
#include "xrt/xrt_device.h"
#include "xrt/xrt_kernel.h"

#include "test_utils.h"

namespace po = boost::program_options;

int main(int argc, const char *argv[]) {
  // ------------------------------------------------------
  // Parse program arguments
  // ------------------------------------------------------
  po::options_description options("Allowed options");
  po::variables_map vm;
  test_utils::add_default_options(options);
  options.add_options()("profile,p", po::value<bool>()->default_value(false),
                        "enable profiling")(
      "test_iter,t", po::value<int>()->default_value(100),
      "number of test iterations");

  test_utils::parse_options(argc, argv, options, vm);
  int verbosity = vm["verbosity"].as<int>();
  int do_verify = vm["verify"].as<bool>();
  int n_iterations = vm["iters"].as<int>();
  int n_warmup_iterations = vm["warmup"].as<int>();
  int trace_size = vm["trace_sz"].as<int>();
  bool do_profile = vm["profile"].as<bool>();
  int n_test_iterations = vm["test_iter"].as<int>();

  // Load instruction sequence
  std::vector<uint32_t> instr_v =
      test_utils::load_instr_binary(vm["instr"].as<std::string>());
  std::vector<uint32_t> instr_attn = test_utils::load_instr_binary("attn.txt");
  std::vector<uint32_t> instr_softmax =
      test_utils::load_instr_binary("softmax.txt");
  std::vector<uint32_t> instr_gemm = test_utils::load_instr_binary("gemm.txt");
  // ------------------------------------------------------
  // Get device, load the xclbin & kernel and register them
  // ------------------------------------------------------
  unsigned int device_index = 0;
  auto device = xrt::device(device_index);

  // Load the xclbin
  if (verbosity >= 1)
    std::cout << "Loading xclbin: " << vm["xclbin"].as<std::string>()
              << std::endl;
  auto xclbin = xrt::xclbin(vm["xclbin"].as<std::string>());

  // Load the kernel
  if (verbosity >= 1)
    std::cout << "Kernel opcode: " << vm["kernel"].as<std::string>()
              << std::endl;
  std::string Node = vm["kernel"].as<std::string>();
  // Get the kernel from the xclbin
  auto xkernels = xclbin.get_kernels();
  auto xkernel = *std::find_if(xkernels.begin(), xkernels.end(),
                               [Node, verbosity](xrt::xclbin::kernel &k) {
                                 auto name = k.get_name();
                                 if (verbosity >= 1) {
                                   std::cout << "Name: " << name << std::endl;
                                 }
                                 return name.rfind(Node, 0) == 0;
                               });
  auto kernelName = xkernel.get_name();

  // Register xclbin
  if (verbosity >= 1)
    std::cout << "Registering xclbin: " << vm["xclbin"].as<std::string>()
              << std::endl;
  device.register_xclbin(xclbin);

  // Get a hardware context
  if (verbosity >= 1)
    std::cout << "Getting hardware context." << std::endl;
  xrt::hw_context context(device, xclbin.get_uuid());

  // Get a kernel handle
  if (verbosity >= 1)
    std::cout << "Getting handle to kernel:" << kernelName << std::endl;
  auto kernel = xrt::kernel(context, kernelName);

  // instruction
  auto bo_instr = xrt::bo(device, instr_v.size() * sizeof(int),
                          XCL_BO_FLAGS_CACHEABLE, kernel.group_id(1));
  void *bufInstr = bo_instr.map<void *>();
  memcpy(bufInstr, instr_v.data(), instr_v.size() * sizeof(int));

  // kernel arguments
  unsigned int opcode = 3;
  auto bo_in0 = xrt::bo(device, 32768 * sizeof(std::bfloat16_t),
                        XRT_BO_FLAGS_HOST_ONLY, kernel.group_id(3));
  std::bfloat16_t *bufIn0 = bo_in0.map<std::bfloat16_t *>();
  std::vector<std::bfloat16_t> srcVec0;
  std::ifstream ifile0("input0.data");
  if (!ifile0.is_open()) {
    std::cerr << "Error: Could not open input file.\n";
    return 1;
  }
  std::vector<std::bfloat16_t> vec0(32768);
  ifile0.read(reinterpret_cast<char *>(vec0.data()),
              32768 * sizeof(std::bfloat16_t));
  srcVec0.insert(srcVec0.end(), vec0.begin(), vec0.end());
  memcpy(bufIn0, srcVec0.data(), (srcVec0.size() * sizeof(std::bfloat16_t)));

  auto bo_out1 = xrt::bo(device, 262144 * sizeof(std::bfloat16_t),
                         XRT_BO_FLAGS_HOST_ONLY, kernel.group_id(4));
  auto bo_in2 = xrt::bo(device, 32768 * sizeof(std::bfloat16_t),
                        XRT_BO_FLAGS_HOST_ONLY, kernel.group_id(5));
  std::bfloat16_t *bufIn2 = bo_in2.map<std::bfloat16_t *>();
  std::vector<std::bfloat16_t> srcVec2;
  std::ifstream ifile1("input1.data");
  if (!ifile1.is_open()) {
    std::cerr << "Error: Could not open input file.\n";
    return 1;
  }
  std::vector<std::bfloat16_t> vec1(32768);
  ifile1.read(reinterpret_cast<char *>(vec1.data()),
              32768 * sizeof(std::bfloat16_t));
  srcVec2.insert(srcVec2.end(), vec1.begin(), vec1.end());
  memcpy(bufIn2, srcVec2.data(), (srcVec2.size() * sizeof(std::bfloat16_t)));
  int tmp_trace_size = (trace_size > 0) ? trace_size : 1;
  auto bo_trace = xrt::bo(device, tmp_trace_size * 4, XRT_BO_FLAGS_HOST_ONLY,
                          kernel.group_id(7));
  if (verbosity >= 1)
    std::cout << "Writing data into buffer objects.\n";
  char *bufTrace = bo_trace.map<char *>();
  if (trace_size > 0)
    memset(bufTrace, 0, trace_size);

  bo_instr.sync(XCL_BO_SYNC_BO_TO_DEVICE);
  bo_in0.sync(XCL_BO_SYNC_BO_TO_DEVICE);
  bo_in2.sync(XCL_BO_SYNC_BO_TO_DEVICE);
  if (trace_size > 0)
    bo_trace.sync(XCL_BO_SYNC_BO_TO_DEVICE);
  if (verbosity >= 1)
    std::cout << "Running Kernel.\n";
  if (!do_profile) {
    auto start = std::chrono::high_resolution_clock::now();
    // gid: (opcode, instr, instr_size, ...)
    auto run = kernel(opcode, bo_instr, instr_v.size(), bo_in0, bo_out1, bo_in2,
                      bo_trace);
    ert_cmd_state r = run.wait();

    auto end = std::chrono::high_resolution_clock::now();
    if (r != ERT_CMD_STATE_COMPLETED) {
      std::cout << "Kernel did not complete. Returned status: " << r << "\n";
      return 1;
    }
    float npu_time =
        std::chrono::duration_cast<std::chrono::microseconds>(end - start)
            .count();
    std::cout << "NPU execution time: " << npu_time << "us\n";
  } else {
    for (size_t i = 0; i < n_warmup_iterations; i++) {
      auto run = kernel(opcode, bo_instr, instr_v.size(), bo_in0, bo_out1,
                        bo_in2, bo_trace);
      ert_cmd_state r = run.wait();
      if (r != ERT_CMD_STATE_COMPLETED) {
        std::cout << "Kernel did not complete. Returned status: " << r << "\n";
        return 1;
      }
    }
    float total_npu_time = 0;
    float npu_time_min = 9999999;
    for (size_t i = 0; i < n_test_iterations; i++) {
      auto start = std::chrono::high_resolution_clock::now();
      auto run =
          kernel(opcode, bo_instr, instr_v.size(), bo_in0, bo_out1, bo_in2);
      run.wait();

      auto end = std::chrono::high_resolution_clock::now();
      float npu_time =
          std::chrono::duration_cast<std::chrono::microseconds>(end - start)
              .count();
      total_npu_time += npu_time;
      npu_time_min = (npu_time < npu_time_min) ? npu_time : npu_time_min;
    }
    std::cout << "Avg NPU execution time: "
              << total_npu_time / n_test_iterations << "us\n";
    std::cout << "Min NPU execution time: " << npu_time_min << "us\n";
  }
  ifile0.close();

  bo_out1.sync(XCL_BO_SYNC_BO_FROM_DEVICE);
  std::bfloat16_t *bufOut1 = bo_out1.map<std::bfloat16_t *>();
  std::ofstream ofile2("output2.data", std::ios::binary);
  ofile2.write(reinterpret_cast<const char *>(bufOut1 + 0),
               262144 * sizeof(std::bfloat16_t));
  ofile2.close();
  ifile1.close();
  if (trace_size > 0) {
    bo_trace.sync(XCL_BO_SYNC_BO_FROM_DEVICE);
    test_utils::write_out_trace(((char *)bufTrace), trace_size,
                                vm["trace_file"].as<std::string>());
  }
  return 0;
}
